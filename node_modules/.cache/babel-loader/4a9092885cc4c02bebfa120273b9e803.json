{"ast":null,"code":"var _jsxFileName = \"/Users/Matt/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.jsx\";\nimport React from \"react\";\n\nfunction ProgressBar({\n  isFocus,\n  focusCount,\n  focusDuration,\n  breakCount,\n  breakDuration,\n  barWidth,\n  setBarWidth\n}) {\n  const timeElapsedA = focusDuration * 60 - focusCount;\n  const timeElapsedB = breakDuration * 60 - breakCount;\n  let percentA = timeElapsedA / (focusDuration * 60) * 100;\n  let percentB = timeElapsedB / (breakDuration * 60) * 100; //focusBar\n\n  const ariaValue = percentA.toFixed(2);\n  setBarWidth(`${percentA}%`);\n  console.log(barWidth);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row mb-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress d-none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"progress-bar\",\n    role: \"progressbar\",\n    \"aria-valuemin\": \"0\",\n    \"aria-valuemax\": \"100\",\n    \"aria-valuenow\": `${ariaValue}` // TODO: Increase aria-valuenow as elapsed time increases\n    ,\n    style: {\n      width: `${barWidth}%`\n    } // TODO: Increase width % as elapsed time increases\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }))));\n  /*\n  const barTemplate = (ariaValue, width) => {\n    return (\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress d-none\">\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={`${ariaValue}`} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${width}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  let result;\n   if (isFocus) {\n    //barB\n    const ariaValue = percentB.toFixed(2);\n    const width = `${percentB}%`;\n    result = barTemplate(ariaValue, width);\n  } else {\n    //barA\n    const ariaValue = percentA.toFixed(2);\n    const width = `${percentA}%`;\n    result = barTemplate(ariaValue, width);\n  }\n   return result;\n  */\n}\n\nexport default ProgressBar;\n/**\n * \n  const bar = document.querySelector(\".progress-bar\");\n * \n  const barA = () => {\n    bar.style.width = `${percentA}%`;\n    bar.setAttribute(\"aria-valuenow\", percentA.toFixed(2));\n  };\n  const barB = () => {\n    bar.style.width = `${percentB}%`;\n    bar.setAttribute(\"aria-valuenow\", percentB.toFixed(2));\n  };\n */","map":{"version":3,"sources":["/Users/Matt/Thinkful/qualified-challenges/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/ProgressBar.jsx"],"names":["React","ProgressBar","isFocus","focusCount","focusDuration","breakCount","breakDuration","barWidth","setBarWidth","timeElapsedA","timeElapsedB","percentA","percentB","ariaValue","toFixed","console","log","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,WAAT,CAAqB;AACnBC,EAAAA,OADmB;AAEnBC,EAAAA,UAFmB;AAGnBC,EAAAA,aAHmB;AAInBC,EAAAA,UAJmB;AAKnBC,EAAAA,aALmB;AAMnBC,EAAAA,QANmB;AAOnBC,EAAAA;AAPmB,CAArB,EAQG;AACD,QAAMC,YAAY,GAAGL,aAAa,GAAG,EAAhB,GAAqBD,UAA1C;AACA,QAAMO,YAAY,GAAGJ,aAAa,GAAG,EAAhB,GAAqBD,UAA1C;AAEA,MAAIM,QAAQ,GAAIF,YAAY,IAAIL,aAAa,GAAG,EAApB,CAAb,GAAwC,GAAvD;AACA,MAAIQ,QAAQ,GAAIF,YAAY,IAAIJ,aAAa,GAAG,EAApB,CAAb,GAAwC,GAAvD,CALC,CAOD;;AACA,QAAMO,SAAS,GAAGF,QAAQ,CAACG,OAAT,CAAiB,CAAjB,CAAlB;AACAN,EAAAA,WAAW,CAAE,GAAEG,QAAS,GAAb,CAAX;AAEAI,EAAAA,OAAO,CAACC,GAAR,CAAYT,QAAZ;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,SAAS,EAAC,cADZ;AAEE,IAAA,IAAI,EAAC,aAFP;AAGE,qBAAc,GAHhB;AAIE,qBAAc,KAJhB;AAKE,qBAAgB,GAAEM,SAAU,EAL9B,CAKiC;AALjC;AAME,IAAA,KAAK,EAAE;AAAEI,MAAAA,KAAK,EAAG,GAAEV,QAAS;AAArB,KANT,CAMoC;AANpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,CADF,CADF;AAiBA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGC;;AAED,eAAeN,WAAf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\n\nfunction ProgressBar({\n  isFocus,\n  focusCount,\n  focusDuration,\n  breakCount,\n  breakDuration,\n  barWidth,\n  setBarWidth,\n}) {\n  const timeElapsedA = focusDuration * 60 - focusCount;\n  const timeElapsedB = breakDuration * 60 - breakCount;\n\n  let percentA = (timeElapsedA / (focusDuration * 60)) * 100;\n  let percentB = (timeElapsedB / (breakDuration * 60)) * 100;\n\n  //focusBar\n  const ariaValue = percentA.toFixed(2);\n  setBarWidth(`${percentA}%`);\n\t\n  console.log(barWidth);\n\n  return (\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        <div className=\"progress d-none\">\n          <div\n            className=\"progress-bar\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            aria-valuenow={`${ariaValue}`} // TODO: Increase aria-valuenow as elapsed time increases\n            style={{ width: `${barWidth}%` }} // TODO: Increase width % as elapsed time increases\n          />\n        </div>\n      </div>\n    </div>\n  );\n\n  /*\n  const barTemplate = (ariaValue, width) => {\n    return (\n      <div className=\"row mb-2\">\n        <div className=\"col\">\n          <div className=\"progress d-none\">\n            <div\n              className=\"progress-bar\"\n              role=\"progressbar\"\n              aria-valuemin=\"0\"\n              aria-valuemax=\"100\"\n              aria-valuenow={`${ariaValue}`} // TODO: Increase aria-valuenow as elapsed time increases\n              style={{ width: `${width}%` }} // TODO: Increase width % as elapsed time increases\n            />\n          </div>\n        </div>\n      </div>\n    );\n  };\n  let result;\n\n  if (isFocus) {\n    //barB\n    const ariaValue = percentB.toFixed(2);\n    const width = `${percentB}%`;\n    result = barTemplate(ariaValue, width);\n  } else {\n    //barA\n    const ariaValue = percentA.toFixed(2);\n    const width = `${percentA}%`;\n    result = barTemplate(ariaValue, width);\n  }\n\n  return result;\n*/\n}\n\nexport default ProgressBar;\n\n/**\n * \n  const bar = document.querySelector(\".progress-bar\");\n * \n  const barA = () => {\n    bar.style.width = `${percentA}%`;\n    bar.setAttribute(\"aria-valuenow\", percentA.toFixed(2));\n  };\n  const barB = () => {\n    bar.style.width = `${percentB}%`;\n    bar.setAttribute(\"aria-valuenow\", percentB.toFixed(2));\n  };\n */\n"]},"metadata":{},"sourceType":"module"}